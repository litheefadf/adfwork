{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "litheefadf"
		},
		"LS_OUTPUT_COMBINEDOUTPUT_JOINS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_OUTPUT_COMBINEDOUTPUT_JOINS'"
		},
		"LS_OUTPUT_SQL_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_OUTPUT_SQL'"
		},
		"ls_customers_csv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_customers_csv'"
		},
		"ls_input_csv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_input_csv'"
		},
		"ls_input_scdtype1_employees_csv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_input_scdtype1_employees_csv'"
		},
		"ls_input_scdtype2_csv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_input_scdtype2_csv'"
		},
		"ls_input_scdtype2_employee_csv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_input_scdtype2_employee_csv'"
		},
		"ls_orders_csv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_orders_csv'"
		},
		"ls_outptut_sql_db_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_outptut_sql_db'"
		},
		"ls_output_csv_files_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_output_csv_files'"
		},
		"ls_output_scdtype1_employees_sqldb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_output_scdtype1_employees_sqldb'"
		},
		"ls_output_scdtype2_employee_sql_db_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_output_scdtype2_employee_sql_db'"
		},
		"ls_output_scdtype2_sqldb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_output_scdtype2_sqldb'"
		},
		"ls_testtrigger_input_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_testtrigger_input'"
		},
		"ls_testtrigger_output_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_testtrigger_output'"
		},
		"LS_OUTPUT_COMBINEDOUTPUT_JOINS_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserverr0206.database.windows.net"
		},
		"LS_OUTPUT_COMBINEDOUTPUT_JOINS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "litheefdb"
		},
		"LS_OUTPUT_COMBINEDOUTPUT_JOINS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "makbabu"
		},
		"LS_OUTPUT_SQL_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserverr0206.database.windows.net"
		},
		"LS_OUTPUT_SQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "litheefdb"
		},
		"LS_OUTPUT_SQL_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "makbabu"
		},
		"ls_outptut_sql_db_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserverr0206.database.windows.net"
		},
		"ls_outptut_sql_db_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "litheefdb"
		},
		"ls_outptut_sql_db_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "makbabu"
		},
		"ls_output_scdtype1_employees_sqldb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserverr0206.database.windows.net"
		},
		"ls_output_scdtype1_employees_sqldb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "litheefdb"
		},
		"ls_output_scdtype1_employees_sqldb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "makbabu"
		},
		"ls_output_scdtype2_employee_sql_db_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserverr0206.database.windows.net"
		},
		"ls_output_scdtype2_employee_sql_db_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "litheefdb"
		},
		"ls_output_scdtype2_employee_sql_db_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "makbabu"
		},
		"ls_output_scdtype2_sqldb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserverr0206.database.windows.net"
		},
		"ls_output_scdtype2_sqldb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "litheefdb"
		},
		"ls_output_scdtype2_sqldb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "makbabu"
		},
		"eventbasedtrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/65b90d11-ceb7-4dea-9b9e-6742b178e1f3/resourceGroups/litheef/providers/Microsoft.Storage/storageAccounts/litheefadf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CarsCSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "planes.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CarsTable",
								"type": "DatasetReference",
								"parameters": {
									"Tablename": "Planes"
								}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CarsTable",
								"type": "DatasetReference",
								"parameters": {
									"Tablename": "Planes"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CarsCSV",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "plane.export.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-09T10:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CarsCSV')]",
				"[concat(variables('factoryId'), '/datasets/CarsTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "csv-to-sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "datasetforinput",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "datasetforoutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-09T04:12:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datasetforinput')]",
				"[concat(variables('factoryId'), '/datasets/datasetforoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customerscsv": {},
									"orderscsv": {},
									"outputfile": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-08T16:03:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varX",
							"value": "80"
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varZ",
							"value": {
								"value": "@{add(int(variables('varX')),int(variables('varY')))}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"varX": {
						"type": "String",
						"defaultValue": "10"
					},
					"varY": {
						"type": "String",
						"defaultValue": "20"
					},
					"varZ": {
						"type": "String",
						"defaultValue": "30"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-09T09:37:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_testrigger_input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_testtrigger_output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_testrigger_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_testtrigger_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scdtype1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scdtype1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scdtype1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scdtype2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scdtype2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"employeetable": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scdtype2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CarsCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_input_csv",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"container": "inputfile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Make",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					},
					{
						"name": "DriveTrain",
						"type": "String"
					},
					{
						"name": "Length",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_input_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CarsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_outptut_sql_db",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Make",
						"type": "nvarchar"
					},
					{
						"name": "Model",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Origin",
						"type": "nvarchar"
					},
					{
						"name": "DriveTrain",
						"type": "nvarchar"
					},
					{
						"name": "Length",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().Tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_outptut_sql_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_input_scdtype2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_input_scdtype2_csv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "scdtype2csv.csv",
						"container": "inputfile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "EmployeeName",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_input_scdtype2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_output_scdtype2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_output_scdtype2_sqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SurrogateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmployeeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmployeeName",
						"type": "nvarchar"
					},
					{
						"name": "Department",
						"type": "nvarchar"
					},
					{
						"name": "salary",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "IsActive",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "scdtype2sql"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_output_scdtype2_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetcustomerscsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_customers_csv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.csv",
						"container": "inputfile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "CustomerName",
						"type": "String"
					},
					{
						"name": "ContactName",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_customers_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetforinput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_input_csv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inputcsvminiproject.csv",
						"container": "inputfile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DeveloperID",
						"type": "String"
					},
					{
						"name": "DeveloperName",
						"type": "String"
					},
					{
						"name": "YearOFEstablishment",
						"type": "String"
					},
					{
						"name": "CEO",
						"type": "String"
					},
					{
						"name": "NumberOfEmployees",
						"type": "String"
					},
					{
						"name": "ServiceAmount",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_input_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetforinputscdtype1employeescsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_input_scdtype1_employees_csv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employeesscdtype1.csv",
						"container": "inputfile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_input_scdtype1_employees_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetforoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_outptut_sql_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Project"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_outptut_sql_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetforoutputscdtypeemployeessqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_output_scdtype1_employees_sqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Department",
						"type": "varchar"
					},
					{
						"name": "Salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employeescdtype1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_output_scdtype1_employees_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetorderscsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_orders_csv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "orders.csv",
						"container": "inputfile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OrderID",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_orders_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetoutputscdtype2sqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_output_scdtype2_employee_sql_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SurrogateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "varchar"
					},
					{
						"name": "department",
						"type": "varchar"
					},
					{
						"name": "salary",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employeeoutputscdtype2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_output_scdtype2_employee_sql_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_outputfile_dataflow_joins')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_output_csv_files",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_output_csv_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_testrigger_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_testtrigger_input",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "testtriggerinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_testtrigger_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_testtrigger_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_testtrigger_output",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "testtriggeroutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_testtrigger_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inputdatasetscdtype2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_input_scdtype1_employees_csv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "SCDTYPE1EMPLOYEE.csv",
						"container": "inputfile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_input_scdtype1_employees_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_OUTPUT_COMBINEDOUTPUT_JOINS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_OUTPUT_COMBINEDOUTPUT_JOINS_properties_typeProperties_server')]",
					"database": "[parameters('LS_OUTPUT_COMBINEDOUTPUT_JOINS_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_OUTPUT_COMBINEDOUTPUT_JOINS_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_OUTPUT_COMBINEDOUTPUT_JOINS_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_OUTPUT_SQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_OUTPUT_SQL_properties_typeProperties_server')]",
					"database": "[parameters('LS_OUTPUT_SQL_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_OUTPUT_SQL_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_OUTPUT_SQL_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_customers_csv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_customers_csv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_input_csv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_input_csv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_input_scdtype1_employees_csv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_input_scdtype1_employees_csv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_input_scdtype2_csv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_input_scdtype2_csv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_input_scdtype2_employee_csv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_input_scdtype2_employee_csv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_orders_csv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_orders_csv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_outptut_sql_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_outptut_sql_db_properties_typeProperties_server')]",
					"database": "[parameters('ls_outptut_sql_db_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_outptut_sql_db_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_outptut_sql_db_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_output_csv_files')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_output_csv_files_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_output_scdtype1_employees_sqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_output_scdtype1_employees_sqldb_properties_typeProperties_server')]",
					"database": "[parameters('ls_output_scdtype1_employees_sqldb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_output_scdtype1_employees_sqldb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_output_scdtype1_employees_sqldb_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_output_scdtype2_employee_sql_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_output_scdtype2_employee_sql_db_properties_typeProperties_server')]",
					"database": "[parameters('ls_output_scdtype2_employee_sql_db_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_output_scdtype2_employee_sql_db_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_output_scdtype2_employee_sql_db_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_output_scdtype2_sqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_output_scdtype2_sqldb_properties_typeProperties_server')]",
					"database": "[parameters('ls_output_scdtype2_sqldb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_output_scdtype2_sqldb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_output_scdtype2_sqldb_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_testtrigger_input')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_testtrigger_input_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_testtrigger_output')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_testtrigger_output_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventbasedtrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline4",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/testtriggerinput/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('eventbasedtrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scheduletrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-06-09T01:03:00",
						"endTime": "2025-06-10T01:03:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tumblingwindow')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline1",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 5,
					"startTime": "2025-06-09T03:43:00Z",
					"endTime": "2025-06-10T03:43:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDTYPE2reloaded')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_input_scdtype2",
								"type": "DatasetReference"
							},
							"name": "sourcecsv"
						},
						{
							"dataset": {
								"referenceName": "dataset_output_scdtype2",
								"type": "DatasetReference"
							},
							"name": "scdtype2table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dataset_output_scdtype2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "dataset_output_scdtype2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "AddingIsActive"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "EXISTINGROWS"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeID as integer,",
						"          EmployeeName as string,",
						"          Department as string,",
						"          salary as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcecsv",
						"source(output(",
						"          SurrogateKey as integer,",
						"          EmployeeID as integer,",
						"          EmployeeName as string,",
						"          Department as string,",
						"          salary as decimal(10,2),",
						"          IsActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> scdtype2table",
						"sourcecsv derive(IsActive = 1) ~> AddingIsActive",
						"scdtype2table select(mapColumn(",
						"          SQL_SurrogateKey = SurrogateKey,",
						"          SQL_EmployeeID = EmployeeID,",
						"          SQL_EmployeeName = EmployeeName,",
						"          SQL_Department = Department,",
						"          SQL_salary = salary,",
						"          SQL_IsActive = IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"sourcecsv, select1 lookup(EmployeeID == SQL_EmployeeID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(SQL_EmployeeID)) ~> EXISTINGROWS",
						"EXISTINGROWS select(mapColumn(",
						"          SQL_SurrogateKey,",
						"          SQL_EmployeeID,",
						"          SQL_EmployeeName,",
						"          SQL_Department,",
						"          SQL_salary,",
						"          SQL_IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(SQL_IsActive = 0) ~> derivedColumn1",
						"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
						"AddingIsActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SurrogateKey as integer,",
						"          EmployeeID as integer,",
						"          EmployeeName as string,",
						"          Department as string,",
						"          salary as decimal(10,2),",
						"          IsActive as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmployeeID,",
						"          EmployeeName,",
						"          Department,",
						"          salary,",
						"          IsActive",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SurrogateKey as integer,",
						"          EmployeeID as integer,",
						"          EmployeeName as string,",
						"          Department as string,",
						"          salary as decimal(10,2),",
						"          IsActive as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['SurrogateKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SurrogateKey = SQL_SurrogateKey,",
						"          EmployeeID = SQL_EmployeeID,",
						"          EmployeeName = SQL_EmployeeName,",
						"          Department = SQL_Department,",
						"          salary = SQL_salary,",
						"          IsActive = SQL_IsActive",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_input_scdtype2')]",
				"[concat(variables('factoryId'), '/datasets/dataset_output_scdtype2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "datasetcustomerscsv",
								"type": "DatasetReference"
							},
							"name": "customerscsv"
						},
						{
							"dataset": {
								"referenceName": "datasetorderscsv",
								"type": "DatasetReference"
							},
							"name": "orderscsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_outputfile_dataflow_joins",
								"type": "DatasetReference"
							},
							"name": "outputfile"
						}
					],
					"transformations": [
						{
							"name": "customersjoinorders"
						},
						{
							"name": "removingcustomerid"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumnsepartingyear"
						},
						{
							"name": "Totalamount"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          CustomerName as string,",
						"          ContactName as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customerscsv",
						"source(output(",
						"          OrderID as string,",
						"          CustomerID as string,",
						"          OrderDate as string,",
						"          Amount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orderscsv",
						"customerscsv, orderscsv join(customerscsv@CustomerID == orderscsv@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> customersjoinorders",
						"customersjoinorders select(mapColumn(",
						"          CustomerID = customerscsv@CustomerID,",
						"          CustomerName,",
						"          ContactName,",
						"          Country,",
						"          OrderID,",
						"          CustomerID = orderscsv@CustomerID,",
						"          OrderDate,",
						"          Amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> removingcustomerid",
						"removingcustomerid filter(Country == 'Mexico') ~> filter1",
						"filter1 derive(Year = year(toDate(OrderDate))) ~> derivedColumnsepartingyear",
						"derivedColumnsepartingyear aggregate(groupBy(CustomerID),",
						"     Amount = sum(toFloat(Amount))) ~> Totalamount",
						"Totalamount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> outputfile"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datasetcustomerscsv')]",
				"[concat(variables('factoryId'), '/datasets/datasetorderscsv')]",
				"[concat(variables('factoryId'), '/datasets/ds_outputfile_dataflow_joins')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scdtype1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "datasetforinputscdtype1employeescsv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "datasetforoutputscdtypeemployeessqldb",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Name as string,",
						"          Department as string,",
						"          Salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Name as string,",
						"          Department as string,",
						"          Salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Name,",
						"          Department,",
						"          Salary",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datasetforinputscdtype1employeescsv')]",
				"[concat(variables('factoryId'), '/datasets/datasetforoutputscdtypeemployeessqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scdtype2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "inputdatasetscdtype2",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "datasetoutputscdtype2sqldb",
								"type": "DatasetReference"
							},
							"name": "employeetable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "datasetoutputscdtype2sqldb",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "datasetoutputscdtype2sqldb",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "addingIsActive"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "EXISTINGEMPLOYEES"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          department as string,",
						"          salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          SurrogateKey as integer,",
						"          empid as integer,",
						"          empname as string,",
						"          department as string,",
						"          salary as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> employeetable",
						"source1 derive(IsActive = 1) ~> addingIsActive",
						"employeetable select(mapColumn(",
						"          SQL_SurrogateKey = SurrogateKey,",
						"          SQL_empid = empid,",
						"          SQL_empname = empname,",
						"          SQL_department = department,",
						"          SQL_salary = salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1, select1 lookup(empid == SQL_empid,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(SQL_empid)) ~> EXISTINGEMPLOYEES",
						"EXISTINGEMPLOYEES select(mapColumn(",
						"          SQL_SurrogateKey,",
						"          SQL_empid,",
						"          SQL_empname,",
						"          SQL_department,",
						"          SQL_salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(IsActive = 0) ~> derivedColumn1",
						"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
						"addingIsActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SurrogateKey as integer,",
						"          empid as integer,",
						"          empname as string,",
						"          department as string,",
						"          salary as decimal(10,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SurrogateKey as integer,",
						"          empid as integer,",
						"          empname as string,",
						"          department as string,",
						"          salary as decimal(10,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['SurrogateKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SurrogateKey = SQL_SurrogateKey,",
						"          empid = SQL_empid,",
						"          empname = SQL_empname,",
						"          department = SQL_department,",
						"          salary = SQL_salary",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdatasetscdtype2')]",
				"[concat(variables('factoryId'), '/datasets/datasetoutputscdtype2sqldb')]"
			]
		}
	]
}