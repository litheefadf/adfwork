{
	"name": "scdtype2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "inputdatasetscdtype2",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "datasetoutputscdtype2sqldb",
						"type": "DatasetReference"
					},
					"name": "employeetable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "datasetoutputscdtype2sqldb",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "datasetoutputscdtype2sqldb",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "addingIsActive"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "EXISTINGEMPLOYEES"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as integer,",
				"          empname as string,",
				"          department as string,",
				"          salary as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          SurrogateKey as integer,",
				"          empid as integer,",
				"          empname as string,",
				"          department as string,",
				"          salary as decimal(10,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> employeetable",
				"source1 derive(IsActive = 1) ~> addingIsActive",
				"employeetable select(mapColumn(",
				"          SQL_SurrogateKey = SurrogateKey,",
				"          SQL_empid = empid,",
				"          SQL_empname = empname,",
				"          SQL_department = department,",
				"          SQL_salary = salary",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1, select1 lookup(empid == SQL_empid,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(SQL_empid)) ~> EXISTINGEMPLOYEES",
				"EXISTINGEMPLOYEES select(mapColumn(",
				"          SQL_SurrogateKey,",
				"          SQL_empid,",
				"          SQL_empname,",
				"          SQL_department,",
				"          SQL_salary",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(IsActive = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
				"addingIsActive sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SurrogateKey as integer,",
				"          empid as integer,",
				"          empname as string,",
				"          department as string,",
				"          salary as decimal(10,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SurrogateKey as integer,",
				"          empid as integer,",
				"          empname as string,",
				"          department as string,",
				"          salary as decimal(10,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['SurrogateKey'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SurrogateKey = SQL_SurrogateKey,",
				"          empid = SQL_empid,",
				"          empname = SQL_empname,",
				"          department = SQL_department,",
				"          salary = SQL_salary",
				"     )) ~> sink2"
			]
		}
	}
}